{"version":3,"sources":["TextForm.js","Navbar.js","About.js","App.js","index.js"],"names":["TextForm","props","useState","text","setText","className","style","color","heading","value","onChange","event","target","id","rows","onClick","newtext","toUpperCase","toLowerCase","alert","split","length","Navbar","mode","to","title","type","about","placeholder","togglemode","for","About","backgroundColor","mystyle","setmystyle","btntext","setbtntext","border","App","setmode","document","body","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.74af95c1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst TextForm = (props) => {\r\n    const handleUpClick = (() => {\r\n        let newtext = text.toUpperCase() ;\r\n        setText(newtext)\r\n        \r\n\r\n    })\r\n    const handleOnChange = ((event) => {\r\n        setText(event.target.value);\r\n\r\n    })\r\n    const handledownclick = (() => {\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext)\r\n\r\n    })\r\n    const clearclick = (() => {\r\n        let newtext =\"\";\r\n        setText(newtext)\r\n        alert(\"are you sure\");\r\n\r\n    })\r\n\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:\"white\"}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange}id=\"myBox\" rows=\"4\"></textarea>\r\n\r\n\r\n            </div>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handledownclick}>Convert To LowerCase</button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={clearclick}>clear</button>\r\n\r\n          </div>\r\n          <div className=\"container my-3\" style={{color:\"black\"}}>\r\n              <h1>Your text Summery</h1>\r\n              <p>{text.split(\" \").length} words and {text.length}Character</p>\r\n              <p>{0.008*text.split(\"\").length } Minutes read</p>\r\n<h2>Preview</h2>\r\n<p color=\"blue\">{text}</p>\r\n          </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default TextForm;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <>\r\n<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"TextForm\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"About\">{props.about}</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Contact-us</Link>\r\n\r\n        </li>\r\n    \r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form>\r\n      {/* <div class=\"form-check form-switch m-3\">\r\n  <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckChecked\" checked/>\r\n  <label class=\"form-check-label\" for=\"flexSwitchCheckChecked\">darkmode</label>\r\n</div> */}\r\n<div className={`form-check form-switch m-3 text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n  <input className=\"form-check-input\"onClick={props.togglemode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">DarkMode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React ,{useState}from 'react'\r\n\r\nconst About = () => {\r\n    const [mystyle,setmystyle]=useState({\r\n        color:\"black\" ,\r\n        backgroundColor:\"white\",\r\n     });\r\nconst[btntext,setbtntext]=useState(\"Enable  dark mode\")   \r\n    const togglestyle=()=>{\r\n         if(mystyle.color===\"black\"){\r\n             setmystyle({\r\n                color:\"white\" ,\r\n                backgroundColor:\"black\",\r\n                border:\"1px solid white\"\r\n\r\n             })\r\n             setbtntext(\"Enable light mode\")\r\n         }else{\r\n            setmystyle({\r\n                color:\"black\" ,\r\n                backgroundColor:\"white\",\r\n\r\n\r\n         })\r\n         setbtntext(\"Enable dark mode\")\r\n        }}\r\n         \r\n             \r\n         \r\n     \r\n    return (\r\n    \r\n        <>\r\n        \r\n            <div className=\"container\" style={mystyle}>\r\n<h2>About-us</h2>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={mystyle}>\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\"  style={mystyle}>\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\"  style={mystyle}type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={mystyle}>\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                <button  className=\"btn btn-primary m-3\" onClick={togglestyle}>{btntext}</button>\r\n            </div>\r\n            </div>\r\n          \r\n        </>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { useState } from 'react'\nimport TextForm from \"./TextForm\"\nimport Navbar from './Navbar';\nimport About from \"./About\"\nimport{BrowserRouter as Router,Switch,Route,}from \"react-router-dom\";\n\nconst App = () => {\n  const [mode,setmode]=useState(\"light\");\n  \n  //wether dark mode is on or off\n  const togglemode=(()=>{\n    if (mode===\"light\"){\n      setmode(\"dark\")\n    document.body.style.backgroundColor=\"grey\";\n\n    }else{\n      setmode(\"light\")\n    document.body.style.backgroundColor=\"white\";\n\n    }\n  })\n\n  return (\n    <>\n    \n    <Router>\n      <Navbar title=\"Home\" about=\"About-us\"  mode={mode} togglemode={togglemode}/>\n      \n      <div className=\"container my-3\">\n      {/* <TextForm heading=\"Enter the text To anlyze\"/> */}\n\n      </div>\n    \n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/textForm\">\n            <TextForm />\n          </Route>\n          \n        </Switch>\n\n      </Router>\n    \n    </>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}